akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = DEBUG  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  log-dead-letters = on
  log-dead-letters-during-shutdown = on

  actor {

    provider = "cluster"
//    provider = "akka.cluster.ClusterActorRefProvider"

    debug {
      receive = off
      autoreceive = off
      lifecycle = off
      unhandled = on
    }

//    serialize-messages = off
//    serializers {
//      bytes = "akka.serialization.ByteArraySerializer"
//      proto = "akka.remote.serialization.ProtobufSerializer"
//      akka-containers = "akka.remote.serialization.MessageContainerSerializer"
//      daemon-create = "akka.remote.serialization.DaemonMsgCreateSerializer"
//      akka-cluster = "akka.cluster.protobuf.ClusterMessageSerializer"
//      //      akka-pubsub = "akka.contrib.pattern.protobuf.DistributedPubSubMessageSerializer"
//      //      akka-persistence-snapshot = "akka.persistence.serialization.SnapshotSerializer"
//      //      akka-persistence-message = "akka.persistence.serialization.MessageSerializer"
//    }
//    serialization-bindings {
//      "[B" = bytes
//      "akka.event.Logging$LogEvent" = bytes
//      "com.google.protobuf.GeneratedMessage" = proto
//      "com.google.protobuf.Message" = proto
//      "akka.actor.ActorSelectionMessage" = akka-containers
//      "akka.remote.DaemonMsgCreate" = daemon-create
//      "akka.cluster.ClusterMessage" = akka-cluster
//      //      "akka.contrib.pattern.DistributedPubSubMessage" = akka-pubsub
//      //      "akka.persistence.serialization.Snapshot" = akka-persistence-snapshot
//      //      "akka.persistence.serialization.Message" = akka-persistence-message
//    }
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }
  }

  cluster {
    // insted of speficying the seed nodes here, like
    // seed-nodes = "["${SEEDNODES}"]"
//    seed-nodes = [
//      "akka.tcp://TestSTOCluster@127.0.0.1:2551",
//      "akka.tcp://TestSTOCluster@127.0.0.1:2552",
//      "akka.tcp://TestSTOCluster@127.0.0.1:2553"]
    // it must be set by a system variable. Format is:
    // akka.tcp://RecCacheCluster@127.0.0.1:6651,akka.tcp://RecCacheCluster@127.0.0.1:6652,akka.tcp://RecCacheCluster@127.0.0.1:6653
    // System variable name is 'SEEDNODES'
    metrics.enabled = off
    // should use: auto-down-unreachable-after = off
    // however, since the planned number of nodes are 3
    // and min 2 nodes should be up for a working cluster segment, thus
    // it must be ok.
    //
    // OPERATION WARNING: because of this setting, from operation pov,
    // the servers must be restarted one-by-one, to leave the cluster
    // operative!
    //
    // ****************************************
    auto-down-unreachable-after = 5s
    roles = [ "sto" ]
    //    role.rcsserver.min-nr-of-members = 2
    // ****************************************
    use-dispatcher = cluster-dispatcher
  }

  //  extensions=["akka.cluster.metrics.ClusterMetricsExtension"]
}

// ****************************************
// DISPATCHERS
// ****************************************
cluster-dispatcher {
  type = "Dispatcher"
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-max = 4
  }
}
